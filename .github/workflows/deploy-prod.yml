name: Deploy to PROD

on:
  workflow_dispatch:
    inputs:
      use_case:
        description: 'Select use case to deploy (shared folder is always included)'
        required: true
        type: choice
        options:
          - usecase-1
          - usecase-2
      change_ticket:
        description: 'Change ticket number (required)'
        required: true
        type: string
      deployment_reason:
        description: 'Reason for deployment'
        required: true
        type: string
      rollback_plan:
        description: 'Rollback plan if deployment fails'
        required: true
        type: string
        default: 'Revert to previous version using Git tags'
      notify_stakeholders:
        description: 'Send notifications to stakeholders'
        required: false
        type: boolean
        default: false

jobs:
  pre-deployment-checks:
    runs-on: ubuntu-latest
    name: Pre-Deployment Validation
    outputs:
      proceed: ${{ steps.validation.outputs.proceed }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Validate inputs
        id: validation
        run: |
          # Validate change ticket format (example: CHG-12345)
          if [[ ! "${{ github.event.inputs.change_ticket }}" =~ ^[A-Z]+-[0-9]+$ ]]; then
            echo "‚ùå Invalid change ticket format. Expected format: CHG-12345"
            echo "proceed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Check if deployment reason is provided
          if [ -z "${{ github.event.inputs.deployment_reason }}" ]; then
            echo "‚ùå Deployment reason is required"
            echo "proceed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "‚úÖ All validations passed"
          echo "proceed=true" >> $GITHUB_OUTPUT
      
      - name: Check TEST deployment status
        run: |
          echo "‚ö†Ô∏è WARNING: Ensure the selected use case has been tested in TEST environment"
          echo "Use Case: ${{ github.event.inputs.use_case }}"
          echo "Change Ticket: ${{ github.event.inputs.change_ticket }}"

  deploy-to-prod:
    needs: pre-deployment-checks
    if: needs.pre-deployment-checks.outputs.proceed == 'true'
    runs-on: ubuntu-latest
    name: Deploy to PROD Environment
    environment: 
      name: production
      url: https://databricks-prod.example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install Databricks CLI
        run: |
          curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh
          echo "$HOME/.databricks/bin" >> $GITHUB_PATH
      
      - name: Configure Databricks CLI
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
        run: |
          databricks configure --token <<EOF
          $DATABRICKS_HOST
          $DATABRICKS_TOKEN
          EOF
      
      - name: Create deployment backup
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
        run: |
          echo "Creating backup of current PROD deployment..."
          
          BACKUP_DATE=$(date +'%Y%m%d-%H%M%S')
          BACKUP_PATH="/Workspace/Deployments/prod-backups/${BACKUP_DATE}"
          
          # Create backup directory
          databricks workspace mkdirs "${BACKUP_PATH}"
          
          # Export current deployment as backup (if exists)
          echo "Backing up shared folder..."
          databricks workspace export-dir \
            /Workspace/Deployments/prod/shared \
            "./backup-shared-${BACKUP_DATE}" \
            --overwrite || echo "No existing shared folder to backup"
          
          echo "Backing up ${{ github.event.inputs.use_case }}..."
          databricks workspace export-dir \
            /Workspace/Deployments/prod/${{ github.event.inputs.use_case }} \
            "./backup-${{ github.event.inputs.use_case }}-${BACKUP_DATE}" \
            --overwrite || echo "No existing use case folder to backup"
          
          echo "Backup completed: ${BACKUP_PATH}"
          echo "backup_path=${BACKUP_PATH}" >> $GITHUB_ENV
      
      - name: Display Deployment Plan
        run: |
          echo "================================================"
          echo "PRODUCTION DEPLOYMENT PLAN"
          echo "================================================"
          echo "Environment: PRODUCTION"
          echo "Use Case: ${{ github.event.inputs.use_case }}"
          echo "Change Ticket: ${{ github.event.inputs.change_ticket }}"
          echo "Triggered by: ${{ github.actor }}"
          echo "Reason: ${{ github.event.inputs.deployment_reason }}"
          echo "Rollback Plan: ${{ github.event.inputs.rollback_plan }}"
          echo ""
          echo "Folders to deploy:"
          echo "  ‚úì src/shared (always deployed)"
          echo "  ‚úì src/${{ github.event.inputs.use_case }}"
          echo ""
          echo "Backup created at: ${{ env.backup_path }}"
          echo "================================================"
      
      - name: Deploy Shared Folder to PROD
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
        run: |
          echo "Deploying shared folder to PRODUCTION..."
          
          # Create directory if it doesn't exist
          databricks workspace mkdirs /Workspace/Deployments/prod/shared || true
          
          # Import shared notebooks
          databricks workspace import-dir \
            ./src/shared \
            /Workspace/Deployments/prod/shared \
            --overwrite
          
          echo "‚úÖ Shared folder deployed to PROD successfully"
      
      - name: Deploy Selected Use Case to PROD
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
        run: |
          echo "Deploying ${{ github.event.inputs.use_case }} to PRODUCTION..."
          
          # Create directory if it doesn't exist
          databricks workspace mkdirs /Workspace/Deployments/prod/${{ github.event.inputs.use_case }} || true
          
          # Import use case notebooks
          databricks workspace import-dir \
            ./src/${{ github.event.inputs.use_case }} \
            /Workspace/Deployments/prod/${{ github.event.inputs.use_case }} \
            --overwrite
          
          echo "‚úÖ ${{ github.event.inputs.use_case }} deployed to PROD successfully"
      
      - name: Deploy Bundle Resources
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
        run: |
          echo "Deploying Databricks bundle resources to PROD..."
          
          # Set the use_case variable for bundle deployment
          export USE_CASE="${{ github.event.inputs.use_case }}"
          
          # Deploy bundle with the prod target
          databricks bundle deploy -t prod --auto-approve
          
          echo "‚úÖ Bundle resources deployed to PROD"
      
      - name: Verify PROD Deployment
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
        run: |
          echo "Verifying PROD deployment..."
          echo "----------------------------------------"
          
          # List deployed assets
          echo "Shared folder contents:"
          databricks workspace ls /Workspace/Deployments/prod/shared
          echo ""
          
          echo "${{ github.event.inputs.use_case }} folder contents:"
          databricks workspace ls /Workspace/Deployments/prod/${{ github.event.inputs.use_case }}
          echo ""
          
          echo "Checking cluster configuration..."
          databricks clusters list | grep prod-cluster || echo "‚ö†Ô∏è prod-cluster not configured"
      
      - name: Run Production Smoke Tests
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
        run: |
          # Install dependencies
          pip install requests
          
          # Run validation script
          python devops/scripts/validate_deployment.py \
            --env prod \
            --host "$DATABRICKS_HOST" \
            --use-case "${{ github.event.inputs.use_case }}" \
            --smoke-test || echo "‚ö†Ô∏è Validation script not found or failed"
      
      - name: Create Production Deployment Record
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üöÄ PROD Deployment - ${new Date().toISOString().split('T')[0]} - ${{ github.event.inputs.change_ticket }}`,
              body: `## Production Deployment Record
              
              ### Deployment Details
              - **Environment:** PRODUCTION
              - **Use Case:** ${{ github.event.inputs.use_case }}
              - **Change Ticket:** ${{ github.event.inputs.change_ticket }}
              - **Deployed by:** ${{ github.actor }}
              - **Deployment Time:** ${new Date().toISOString()}
              - **Workflow Run:** [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
              
              ### Deployment Reason
              ${{ github.event.inputs.deployment_reason }}
              
              ### Rollback Plan
              ${{ github.event.inputs.rollback_plan }}
              
              ### Deployed Components
              - ‚úÖ Shared folder
              - ‚úÖ ${{ github.event.inputs.use_case }}
              
              ### Workspace Paths
              - **/Workspace/Deployments/prod/shared**
              - **/Workspace/Deployments/prod/${{ github.event.inputs.use_case }}**
              
              ### Backup Location
              ${{ env.backup_path }}
              
              ### Post-Deployment Actions
              - [ ] Monitor application performance
              - [ ] Check error logs
              - [ ] Validate business functionality
              - [ ] Update documentation if needed
              - [ ] Close change ticket
              
              ### Rollback Instructions
              If rollback is needed:
              1. Use the backup at: ${{ env.backup_path }}
              2. Or revert to previous Git tag
              3. Re-run deployment with previous version`,
              labels: ['deployment', 'production', 'change-${{ github.event.inputs.change_ticket }}']
            });
            
            console.log(`Created production deployment record: #${issue.data.number}`);
      
      - name: Deployment Summary
        run: |
          echo "## üöÄ PRODUCTION Deployment Completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** PRODUCTION" >> $GITHUB_STEP_SUMMARY
          echo "- **Use Case:** ${{ github.event.inputs.use_case }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Change Ticket:** ${{ github.event.inputs.change_ticket }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** ‚úÖ Success" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployed Folders" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ `/Workspace/Deployments/prod/shared`" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ `/Workspace/Deployments/prod/${{ github.event.inputs.use_case }}`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Backup Location" >> $GITHUB_STEP_SUMMARY
          echo "${{ env.backup_path }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Post-Deployment Actions" >> $GITHUB_STEP_SUMMARY
          echo "1. Monitor application performance" >> $GITHUB_STEP_SUMMARY
          echo "2. Check for any errors in logs" >> $GITHUB_STEP_SUMMARY
          echo "3. Validate business functionality" >> $GITHUB_STEP_SUMMARY
          echo "4. Update change ticket with deployment details" >> $GITHUB_STEP_SUMMARY
      
      - name: Handle Deployment Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `‚ùå PROD Deployment Failed - ${{ github.event.inputs.change_ticket }}`,
              body: `## Production Deployment Failed
              
              ### Failure Details
              - **Change Ticket:** ${{ github.event.inputs.change_ticket }}
              - **Use Case:** ${{ github.event.inputs.use_case }}
              - **Failed at:** ${new Date().toISOString()}
              - **Triggered by:** ${{ github.actor }}
              
              ### Rollback Instructions
              ${{ github.event.inputs.rollback_plan }}
              
              ### Action Required
              1. Check the [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
              2. Identify the failure cause
              3. Execute rollback if needed
              4. Update the change ticket
              
              @${{ github.actor }} - Please investigate immediately.`,
              labels: ['deployment', 'production', 'failed', 'urgent']
            });
            
            console.log(`Created failure record: #${issue.data.number}`);